--- 
title: "화재 보험 산정"
author: "Analytics Group"
format: 
  dashboard:
    theme: flatly
    css: red-white.css
--- 

```{python}
import plotly.express as px
df = px.data.gapminder()
```

# 0. 인트로 (문제정의)

1. 화재보험 이미지
2. 우리는 보험사 
3. Ames시 보험 금액 얼마일까? 
4. 

# 1. 화재 위험 지역 시각화

## Column {width=60%}
```{python}
#| echo: false
import os
import shutil
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
import scipy as sp
import scipy.stats as st
import statsmodels.api as sm
from statsmodels.formula.api import ols
import statsmodels.formula.api as smf
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression, Ridge, Lasso, RidgeCV, LassoCV
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error, root_mean_squared_error
from sklearn.impute import SimpleImputer
from sklearn.datasets import load_iris
from sklearn import linear_model
from tqdm import tqdm
warnings.filterwarnings('ignore')

os.chdir('../src')
from dataloader import DataLoader

# load data 

dataloader = DataLoader()
dataset = dataloader.load_data()
```

```{python}
#| echo: false
import pandas as pd
import plotly.graph_objects as go

dataset['PricePerArea'] = dataset['SalePrice'] / dataset['LotArea']
# ---------------------------
# 💰 지역별 '평단가' 기반 등급 분류 (5단계)
# ---------------------------
price_per_area_by_neigh = dataset['PricePerArea']
q20 = price_per_area_by_neigh.quantile(0.20)
q40 = price_per_area_by_neigh.quantile(0.40)
q60 = price_per_area_by_neigh.quantile(0.60)
q80 = price_per_area_by_neigh.quantile(0.80)

def classify_price_grade(price):
    if price <= q20:
        return 1
    elif price <= q40:
        return 2
    elif price <= q60:
        return 3
    elif price <= q80:
        return 4
    else:
        return 5



#  위험도 평균 열 생성
dataset['Risk_Avg'] = (
    dataset['Risk_RoofMatl'] * 0.30 +
    dataset['Risk_Exterior1st'] * 0.30 +
    dataset['Risk_Exterior2nd'] * 0.10 +
    dataset['Risk_MasVnrType'] * 0.10 +
    dataset['Risk_WoodDeckSF'] * 0.2
)

# 위험도 평균을 5단계로 그룹화
dataset['Risk_Level'] = dataset['Risk_Avg'].round()

# 결측값 제거
dataset = dataset.dropna(subset=['PricePerArea'])

# 색상 설정
color_map = {
    1: 'white', 2: 'gray', 3: 'yellow', 4: 'orange', 5: 'red'
}

# 소방서 위치
fire_stations = pd.DataFrame({
    'Name': ['Station 1', 'Station 2', 'Station 3'],
    'Latitude': [42.034862, 42.021596, 42.001115],
    'Longitude': [-93.615031, -93.649759, -93.609166]
})

# 지도 레이아웃
layout_mapbox = dict(
    mapbox=dict(style="open-street-map", center=dict(lat=42.0345, lon=-93.62), zoom=11),
    margin={"r": 0, "t": 40, "l": 0, "b": 0},
    title='Ames 시 위험도 기반 주택 시각화 & 소방서 위치'
)

# 주택 마커
traces = []
for level, color in color_map.items():
    df = dataset[dataset['Risk_Level'] == level]
    traces.append(go.Scattermapbox(
        lat=df['Latitude'], lon=df['Longitude'],
        mode='markers',
        marker=dict(size=7, color=color, opacity=0.6),
        text='가격: $' + df['SalePrice'].astype(str) + '<br>위험도: ' + df['Risk_Level'].astype(str),
        name=f'위험도 {level}'
    ))

# 소방서 마커
fire_trace = go.Scattermapbox(
    lat=fire_stations['Latitude'],
    lon=fire_stations['Longitude'],
    mode='markers+text',
    marker=dict(size=12, color='black'),
    text=fire_stations['Name'],
    name='소방서',
    textposition='top right'
)

# 시각화
fig = go.Figure(data=traces + [fire_trace], layout=layout_mapbox)
fig.show()

```

## Column {width=40%}


# 2. 평단가별 지역 시각화

# 3. 화재 발생 시 피해액 예측

🚌 핵심 위험 지표 패널
- 외장재 , 판매액, 내장재에 대해 위험 등급을 구하고 거기에 따른 피해액 책정
- ⚠️우리의 표본이 대표성이 있는지 평균 분포를 보고 통계적 검증 후 도입해야함
- 표본(판매된 집) vs. 모집단(전체 Ames 주택) 평균 비교 (Z-test)

## Row {height=20%}

```{python}
#| content: valuebox
#| title: "평균위험도"
#| icon: "exclamation-triangle"
#| color: "warning"
dict(icon = "currency-dollar",
    color = "secondary",
    value = "3.13")
```

```{python}
#| content: valuebox
#| title: "고위험건물"
#| icon: building
#| color: danger
dict(
  value = "142건"
)
```

```{python}
#| content: valuebox
#| title: "예상 피해액"
#| icon: pencil
#| color: danger
dict(
  value = "$24.5M"
)
```


```{python}
#| content: valuebox
#| title: "결정계수 (R², Lasso)"
#| icon: pencil
#| color: warnings
dict(
  value = "0.81"
)
```


## Row {title="핵심 위험 지표 패널" height=20%}

### Column {width=50%}
::: {.card title="위험 요소 분석 차트"}
* 외장재
* 내장재
* 가격위험도 비교
:::

### Column {width=50%}
::: {.card title="지역별 위험도 히트맵"}
* 지역별 위험도 수준은 색상으로
:::

## Row {height=20%}

### Column {width=50%}
::: {.card title="모델예측 vs 실제비교"}
산점도 : 예측 vs 실제 피해액
:::

### Column {width=50%}
::: {.card title="특정 중요도 차트"}
Lasso/Ridge 모델 특성 영향력
:::

## Row {height=20%}
::: {.card}
연도별 위험도
(건축 연도 기준)
:::

::: {.card}
표본 대표성 검증
(z-test 결과)
:::

::: {.card}
고급 필터링 패널
(위험도, 지역, 건축년도 필터)
:::



# 4. 예상 보험금 산정
# 5. 결론 및 정책 제안
- 우리가 분석했던 것 바탕으로 예상 보험액 산정
- 심슨 가족을 위한 화재 안전 주택 추천 리스트 제공 ( 위험도, 보험금, 자원 접근성 종합)
## Row {height=0%}
### Column {width=50%}

::: {.card title="등급 생성"}
* 파생 변수 생성: 주택 자재 컬럼들 활용한 화재 위험 등급 생성
* 통계적 검증: t-검정으로 지역별 위험도 유의성 확인 (표본 → 모집단 추정)
* 시각화 : 위험 등급별 색상 구분 (예시) 빨강, 초록
:::

### Column {width=50%}

::: {.card title="김건우님의 주거 안전 상태"}
- 계약서 분석 결과: 위험조항 3개 발견
- 현 거주지 안전점수: 68/100 (하위 30%)
- 교통접근성: 76/100 (상위 45%)
:::

## Row {height=100%}
```{python}

```


# 👨‍🚒🧯 화재 대응 자원 분포 분석
- 화재 발생 시 물공급 가능 시설이 있는지 파악
- 수영장, 소방서 etc.

## Row {height=10%} {.tabset}

```{python}
#| title: Population

```

```{python}
#| title: Life Expectancy

```